// const numIslands = grid => {
//   const [MAX_ROW, MAX_COL] = [grid.length, grid[0].length];
//   const dr = [0, 0, -1, 1];
//   const dc = [-1, 1, 0, 0];
//   const cnt = 0;
//   // for (let r = 0; r < MAX_ROW; r++) {
//   //   for (let c = 0; c < MAX_COL; c++) {
//   if (grid[0][0] === '1') {
//     const queue = [[0, 0]];
//     while (queue.length) {
//       const [cr, cc] = queue.shift();
//       grid[cr][cc] = '0';

//       for (let i = 0; i < 4; i++) {
//         const [nr, nc] = [cr + dr[i], cc + dc[i]];

//         if (nr < 0 || nr >= MAX_ROW || nc < 0 || nc >= MAX_COL) continue;
//         if (grid[nr][nc] === '0') continue;
//         queue.push([nr, nc]);
//       }
//     }
//   }
//   grid;
//   //   }
//   // }
// };

// TODO: BFS는 안되는데 중첩함수는 되는 이유...?
const numIslands = grid => {
  const [MAX_ROW, MAX_COL] = [grid.length, grid[0].length];

  const fillWater = (r, c) => {
    if (r < 0 || r >= MAX_ROW || c < 0 || c >= MAX_COL || grid[r][c] === '0') return;
    grid[r][c] = '0';
    fillWater(r - 1, c);
    fillWater(r + 1, c);
    fillWater(r, c - 1);
    fillWater(r, c + 1);
  };

  let cnt = 0;
  for (let r = 0; r < MAX_ROW; r++) {
    for (let c = 0; c < MAX_COL; c++) {
      if (grid[r][c] === '1') {
        fillWater(r, c);
        cnt += 1;
      }
    }
  }
  return cnt;
};

const grid1 = [
  ['1', '1', '1', '1', '0'],
  ['1', '1', '0', '1', '0'],
  ['1', '1', '0', '0', '0'],
  ['0', '0', '0', '1', '1'],
];

const grid2 = [
  [
    '1',
    '1',
    '1',
    '1',
    '1',
    '0',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '0',
    '1',
    '0',
    '1',
    '1',
  ],
  [
    '0',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '0',
    '1',
    '1',
    '1',
    '1',
    '1',
    '0',
  ],
  [
    '1',
    '0',
    '1',
    '1',
    '1',
    '0',
    '0',
    '1',
    '1',
    '0',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
  ],
  [
    '1',
    '1',
    '1',
    '1',
    '0',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
  ],
  [
    '1',
    '0',
    '0',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
  ],
  [
    '1',
    '0',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '0',
    '1',
    '1',
    '1',
    '0',
    '1',
    '1',
    '1',
    '0',
    '1',
    '1',
    '1',
  ],
  [
    '0',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '0',
    '1',
    '1',
    '0',
    '1',
    '1',
    '1',
    '1',
  ],
  [
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '0',
    '1',
    '1',
    '1',
    '1',
    '0',
    '1',
    '1',
  ],
  [
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '0',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
  ],
  [
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
  ],
  [
    '0',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '0',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
  ],
  [
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
  ],
  [
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
  ],
  [
    '1',
    '1',
    '1',
    '1',
    '1',
    '0',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '0',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
  ],
  [
    '1',
    '0',
    '1',
    '1',
    '1',
    '1',
    '1',
    '0',
    '1',
    '1',
    '1',
    '0',
    '1',
    '1',
    '1',
    '1',
    '0',
    '1',
    '1',
    '1',
  ],
  [
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '0',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '0',
  ],
  [
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '0',
    '1',
    '1',
    '1',
    '1',
    '0',
    '0',
  ],
  [
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
  ],
  [
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
  ],
  [
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
    '1',
  ],
];

console.log(numIslands(grid1));
console.log(numIslands(grid2));
